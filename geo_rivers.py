#!/usr/bin/python
"""
Detect all rivers.
"""
import sys
import argparse
import psycopg2

EPS = 0.001

def make_valid(table, cursor, merge, line_id):
    """Removes the smallest segments until a single line remains. Update."""
    multi_line = True
    while multi_line:
        sql_array = "'" + "'::geometry, '".join(merge) + "'::geometry"
        cursor.execute(f"""
            SELECT ST_AsText(geo) FROM (
              SELECT (ST_Dump(ST_LineMerge(ST_Union(ARRAY[{sql_array}])))).geom)
            AS lines (geo) ORDER BY ST_Length(geo) DESC""")
        merge = cursor.fetchall()
        if len(merge) == 1:
            break
        merge = [m[0] for m in merge[:-1]]

    cursor.execute(f"""
        UPDATE {table}
        SET wkb_geometry = '{merge[0][0]}'::geometry
        WHERE id = {line_id}""")

def main():
    """Main method."""
    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        description='Create vegetation areas from postgis database.')
    parser.add_argument(
        '-d', '--database', dest='db', required=True,
        help='db to connect to user:password@dbname:host')
    parser.add_argument(
        '-t', '--table', dest='table', required=True,
        help='table prefix; _pts and _lines will be added')
    parser.add_argument(
        '-v', '--verbose', action='store_true',
        help='verbose', required=False)
    args = parser.parse_args()

    conn = psycopg2.connect(
        user=f"{args.db.split('@')[0].split(':')[0]}",
        password=f"{args.db.split('@')[0].split(':')[1]}",
        database=f"{args.db.split('@')[1].split(':')[0]}",
        host=f"{args.db.split('@')[1].split(':')[1]}")
    cursor = conn.cursor()

    ppp = 'POLYGON((-19.710749531033358 44.17305901278469,-19.710610784609308 44.17168321443539,-19.71042372270468 44.17026666358055,-19.710221041773373 44.16882116927421,-19.71003543826931 44.167358540570426,-19.709899608646396 44.16589058652326,-19.709846249358527 44.16442911618676,-19.70990805685963 44.16298593861498,-19.710117727603603 44.16157286286199,-19.710507958044353 44.16020169798182,-19.711605904901724 44.1581012050913,-19.712463247959203 44.156996103365074,-19.713447223300818 44.15595909187755,-19.71451028992011 44.154965018400105,-19.715604906810604 44.15398873070411,-19.716683532965853 44.15300507656091,-19.71769862737939 44.15198890374188,-19.718602649044755 44.1509150600184,-19.71934805695549 44.14975839316182,-19.719887310105122 44.148493750943516,-19.720196830057365 44.14676996020658,-19.72012508189147 44.14521683720006,-19.71980964986534 44.14378981728187,-19.71927812754869 44.142478163362,-19.718558108511246 44.14127113835042,-19.717677186322707 44.14015800515709,-19.716662954552802 44.139128026691985,-19.715543006771238 44.13817046586508,-19.71434493654774 44.137274585586354,-19.713096337452015 44.13642964876576,-19.711824803053787 44.13562491831329,-19.71055792692277 44.1348496571389,-19.709323302628682 44.13409312815257,-19.708071663540224 44.1332938221432,-19.70643137633408 44.132280062057994,-19.704963232862426 44.13126838876615,-19.70366149535783 44.13025064748049,-19.70252042605285 44.129218683413825,-19.701534287180053 44.12816434177897,-19.700697340971992 44.12707946778875,-19.700003849661243 44.12595590665597,-19.69944807548037 44.12478550359346,-19.699024280661924 44.12356010381403,-19.69872672743848 44.122271552530506,-19.698549678042596 44.120911694955694,-19.698487394706838 44.119472376302426,-19.69853413966377 44.117945441783505,-19.69868417514595 44.11632273661175,-19.69893176338595 44.114596105999986,-19.69948073838458 44.11176022352045,-19.699606156949187 44.11034018744537,-19.699633853620373 44.10892053564901,-19.699467145148574 44.10694832500776,-19.700812875513144 44.10670843563909,-19.700962804454498 44.10812028488939,-19.700970437643548 44.109550706777185,-19.700868121789014 44.110994880862286,-19.70068820359961 44.11244798670451,-19.700463029784054 44.113905203863645,-19.700224947051073 44.11536171189953,-19.700006302109365 44.11681269037196,-19.699839441667663 44.11825331884074,-19.699756712434677 44.11967877686568,-19.69979046111912 44.12108424400661,-19.699973034429718 44.122464899823306,-19.700336779075183 44.123815923875604,-19.70147894407743 44.12605480766517,-19.702330384417934 44.12715635321511,-19.703263641412605 44.128169756719345,-19.704267732029322 44.12910702136662,-19.705331673235968 44.129980150345666,-19.706444482000425 44.13080114684523,-19.70759517529057 44.131582014054054,-19.708772770074283 44.13233475516088,-19.70996628331945 44.13307137335446,-19.711164731993946 44.13380387182353,-19.712357133065662 44.13454425375684,-19.71353250350247 44.13530452234313,-19.714679860272252 44.13609668077113,-19.71578822034289 44.1369327322296,-19.716846600682267 44.137824679907276,-19.717844018258262 44.13878452699291,-19.71876949003876 44.13982427667523,-19.720101677405324 44.14173228346456,-19.720712130202386 44.14303763761533,-19.721092391587902 44.14443033149426,-19.721245625851914 44.14587160387446,-19.721174997284468 44.147322693529006,-19.720862898621647 44.148816075409925,-19.720297543366154 44.1501391152926,-19.719558035239913 44.15132615232045,-19.718682057012803 44.15240611358463,-19.717707291454666 44.1534079261763,-19.716671421335377 44.1543605171866,-19.715612129424795 44.15529281370672,-19.714567098492783 44.156233742827816,-19.713574011309206 44.157212231641026,-19.712367126118046 44.15866565066463,-19.711634141322545 44.15994443181032,-19.71114241066689 44.1612715005124,-19.71085594274944 44.1626395449352,-19.710738746168552 44.16404125324305,-19.71075482952258 44.16546931360027,-19.710868201409877 44.16691641417119,-19.711042870428805 44.168375243120146,-19.711242845177722 44.169838488611454,-19.711432134254977 44.17129883880945,-19.711592311665715 44.17300256822735,-19.710749531033358 44.17305901278469,-19.710749531033358 44.17305901278469,-19.710749531033358 44.17305901278469))'
    cursor.execute(f"""
        SELECT id, ST_Buffer(ST_MakePolygon(wkb_geometry), 0.001)
        FROM {args.table}_lines
        WHERE type LIKE '%STREAM%' AND ST_IsClosed(wkb_geometry) AND style = 'fill: #36868d;'""")
    rows = cursor.fetchall()
    for row in rows:
        cursor.execute(f"""
            SELECT (ST_Dump(CG_ApproximateMedialAxis('{row[1]}'::geometry))).geom""")
        axis = cursor.fetchall()
        if args.verbose:
            print(f"- axe {row[0]}")
        make_valid(f"{args.table}_lines", cursor, [l[0] for l in axis], row[0])
    print(f"{len(rows)}")

    sys.exit(0);
    cursor.execute(f"""
        SELECT wkb_geometry
        FROM {args.table}_lines AS tl
        WHERE tl.type LIKE '%STREAM%' AND EXISTS (
          SELECT tr.id
          FROM {args.table}_lines AS tr
          WHERE tr.type = '0' AND
            ST_Distance(tl.wkb_geometry, tr.wkb_geometry) < {EPS}
          LIMIT 1)""")
    rows = cursor.fetchall()
    print(f"{len(rows)}")

#    conn.commit()

if __name__ == '__main__':
    main()
